994. Rotting Oranges
Easy

525

55

Favorite

Share
In a given grid, each cell can have one of three values:

the value 0 representing an empty cell;
the value 1 representing a fresh orange;
the value 2 representing a rotten orange.
Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange.  If this is impossible, return -1 instead.

 

Example 1:



Input: [[2,1,1],[1,1,0],[0,1,1]]
Output: 4
Example 2:

Input: [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation:  The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.
Example 3:

Input: [[0,2]]
Output: 0
Explanation:  Since there are already no fresh oranges at minute 0, the answer is just 0.
 

Note:

1 <= grid.length <= 10
1 <= grid[0].length <= 10
grid[i][j] is only 0, 1, or 2.


from collections import deque
class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        vv = deque()
        n,m = len(grid),len(grid[0])
        fresh = 0
        visited = set()
        for i in range(n):
            for j in range(m):
                if grid[i][j]==2:
                    vv.append((0,i,j))
                    visited.add((i,j))
                if grid[i][j]==1:
                    fresh+=1
        maxim  = 0 
        c = 0
        while vv:
            dist,x,y = vv.popleft()
            maxim = max(maxim,dist)
            for i,j in zip([1,-1,0,0],[0,0,1,-1]):
                n_x,n_y = x+i,y+j
                if 0<=n_x<n and 0<=n_y<m and grid[n_x][n_y]==1 and (n_x,n_y) not in visited:
                    visited.add((n_x,n_y))
                    vv.append((dist+1,n_x,n_y))
                    c+=1
        
        return maxim if c==fresh else -1
            
