There is a new alien language which uses the latin alphabet. However, the order among letters are unknown to you. You receive a list of non-empty words from the dictionary, where words are sorted lexicographically by the rules of this new language. Derive the order of letters in this language.

Example 1:

Input:
[
  "wrt",
  "wrf",
  "er",
  "ett",
  "rftt"
]

Output: "wertf"
Example 2:

Input:
[
  "z",
  "x"
]

Output: "zx"
Example 3:

Input:
[
  "z",
  "x",
  "z"
] 

Output: "" 

Explanation: The order is invalid, so return "".
Note:

You may assume all letters are in lowercase.
You may assume that if a is a prefix of b, then a must appear before b in the given dictionary.
If the order is invalid, return an empty string.
There may be multiple valid order of letters, return any one of them is fine.



class Solution(object):
    def alienOrder(self, words):
        """
        :type words: List[str]
        :rtype: str
        """
        prev=collections.defaultdict(set)
        succ=collections.defaultdict(set)
        for a,b in zip(words,words[1:]):
            for i,j in zip(a,b):
                if i!=j:
                    succ[i].add(j)
                    prev[j].add(i)
                    break
        free=set(''.join(words))-set(prev)
        print(prev,succ)
        order=[]
        while free:
            val=free.pop()
            order+=val,
            for k in succ[val]:
                prev[k].discard(val)
                if not prev[k]:
                    free.add(k)        
        if set(order)==set(''.join(words)):
            return ''.join(order)
        else:
            return ''
        
        
