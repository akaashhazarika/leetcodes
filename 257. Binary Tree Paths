257. Binary Tree Paths
Easy

933

70

Favorite

Share
Given a binary tree, return all root-to-leaf paths.

Note: A leaf is a node with no children.

Example:

Input:

   1
 /   \
2     3
 \
  5

Output: ["1->2->5", "1->3"]

Explanation: All root-to-leaf paths are: 1->2->5, 1->3



# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def binaryTreePaths(self, root):
        """
        :type root: TreeNode
        :rtype: List[str]
        """
        res=[]
        def helper(root,curr):
            if not root:
                return
            if root.left==None and root.right==None:
                curr.append((str(root.val)))
                res.append('->'.join(curr[:]))
                curr.pop()
            else:
                curr.append(str(root.val))
                helper(root.left,curr)
                helper(root.right,curr)
                curr.pop()
        helper(root,[])
        return res
