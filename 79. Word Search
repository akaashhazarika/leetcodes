79. Word Search
Medium

1976

100

Favorite

Share
Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

Example:

board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

Given word = "ABCCED", return true.
Given word = "SEE", return true.
Given word = "ABCB", return false.



class Solution(object):
    def exist(self, board, word):
        """
        :type board: List[List[str]]
        :type word: str
        :rtype: bool
        """
        if not board or not board[0]:
            return False
        n,m = len(board),len(board[0])
        def helper(row,col,word,k):
            if len(word)==k:
                return True
            if row>=0 and row<n and col>=0 and col<m and \
                board[row][col] == word[k]:
                val = board[row][col]
                board[row][col] ='$'
                result = [helper(row-1,col,word,k+1),
                          helper(row+1,col,word,k+1),
                          helper(row,col+1,word,k+1),
                          helper(row,col-1,word,k+1),
                         ]
                if any(result)==True:
                    return True
            
                board[row][col] = val
            return False
    
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j]==word[0]:
                    val = helper(i,j,word,0)
                    if val:
                        return True
        return False
