211. Add and Search Word - Data structure design
Medium

889

55

Favorite

Share
Design a data structure that supports the following two operations:

void addWord(word)
bool search(word)
search(word) can search a literal word or a regular expression string containing only letters a-z or .. A . means it can represent any one letter.

Example:

addWord("bad")
addWord("dad")
addWord("mad")
search("pad") -> false
search("bad") -> true
search(".ad") -> true
search("b..") -> true
Note:
You may assume that all words are consist of lowercase letters a-z.

Accepted


class Trienode(object):
    def __init__(self):
        self.child=collections.defaultdict(Trienode)
        self.isword =False


class WordDictionary(object):

    
    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root=Trienode()
        

    def addWord(self, word):
        """
        Adds a word into the data structure.
        :type word: str
        :rtype: None
        """
        val=self.root
        for w in word:
            val=val.child[w]
        val.isword =True
        

    def search(self, word):
        """
        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.
        :type word: str
        :rtype: bool
        """
        val=self.root
        return self.dfs(val,word)
        
    
    def dfs(self,curr,word):
        if not word:
            if curr.isword:
                return True
            return False
        if word[0]=='.':
            return any(self.dfs(val,word[1:])  
                        for val in curr.child.values())
        else:
            if word[0] in curr.child.keys():
                return self.dfs(curr.child[word[0]],word[1:])
            else:
                return False
                


# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)
