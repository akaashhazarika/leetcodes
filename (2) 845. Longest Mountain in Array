845. Longest Mountain in Array
Medium

414

15

Favorite

Share
Let's call any (contiguous) subarray B (of A) a mountain if the following properties hold:

B.length >= 3
There exists some 0 < i < B.length - 1 such that B[0] < B[1] < ... B[i-1] < B[i] > B[i+1] > ... > B[B.length - 1]
(Note that B could be any subarray of A, including the entire array A.)

Given an array A of integers, return the length of the longest mountain. 

Return 0 if there is no mountain.

Example 1:

Input: [2,1,4,7,3,2,5]
Output: 5
Explanation: The largest mountain is [1,4,7,3,2] which has length 5.
Example 2:

Input: [2,2,2]
Output: 0
Explanation: There is no mountain.
Note:

0 <= A.length <= 10000
0 <= A[i] <= 10000
Follow up:

Can you solve it using only one pass?
Can you solve it in O(1) space?


class Solution:
    def longestMountain(self, A: List[int]) -> int:
        i = 0
        maxim = 0
        while i<len(A):
            start = i 
            while i+1<len(A) and A[i+1]>A[i]:
                i+=1
            if i!=start and i+1<len(A) and A[i]>A[i+1]:   
                while i+1<len(A) and A[i]>A[i+1]:
                    i+=1
                maxim = max(maxim,i-start+1)
            ##Edge condition when the next_element is not greater
            if i==start:
                i = i+1
        return maxim
