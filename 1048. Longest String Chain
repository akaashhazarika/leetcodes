1048. Longest String Chain
Medium

1585

103

Add to List

Share
Given a list of words, each word consists of English lowercase letters.

Let's say word1 is a predecessor of word2 if and only if we can add exactly one letter anywhere in word1 to make it equal to word2.  For example, "abc" is a predecessor of "abac".

A word chain is a sequence of words [word_1, word_2, ..., word_k] with k >= 1, where word_1 is a predecessor of word_2, word_2 is a predecessor of word_3, and so on.

Return the longest possible length of a word chain with words chosen from the given list of words.

 

Example 1:

Input: words = ["a","b","ba","bca","bda","bdca"]
Output: 4
Explanation: One of the longest word chain is "a","ba","bda","bdca".
Example 2:

Input: words = ["xbc","pcxbcf","xb","cxbc","pcxbc"]
Output: 5
 

Constraints:

1 <= words.length <= 1000
1 <= words[i].length <= 16
words[i] only consists of English lowercase letters.


class Solution:
    def longestStrChain(self, words: List[str]) -> int:
        if not words:
            return 0
        words.sort(key=lambda v:len(v))
        dp = [1]*len(words)
        
        def predecessor(s1,s2):
            for i in range(len(s1)):
                if s1[i]==s2[i]:
                    continue
                else:
                    return s1[i:]==s2[i+1:]
            return True
        
        for i in range(1,len(words)):
            for j in range(0,i):
                if len(words[j])==len(words[i])-1 and predecessor(words[j],words[i]):
                    dp[i] = max(dp[i],dp[j]+1)
                    
        return max(dp)
                
                
                
        
