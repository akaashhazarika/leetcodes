650. Lowest Common Ancestor of a Binary Tree III
Medium

158

6

Add to List

Share
Given two nodes of a binary tree p and q, return their lowest common ancestor (LCA).

Each node will have a reference to its parent node. The definition for Node is below:

class Node {
    public int val;
    public Node left;
    public Node right;
    public Node parent;
}
According to the definition of LCA on Wikipedia: "The lowest common ancestor of two nodes p and q in a tree T is the lowest node that has both p and q as descendants (where we allow a node to be a descendant of itself)."

 

Example 1:


Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.
Example 2:


Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5 since a node can be a descendant of itself according to the LCA definition.
Example 3:

Input: root = [1,2], p = 1, q = 2
Output: 1
 

Constraints:

The number of nodes in the tree is in the range [2, 105].
-109 <= Node.val <= 109
All Node.val are unique.
p != q
p and q exist in the tree.


"""
# Definition for a Node.
class Node(object):
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children
"""

class Codec:
    def serialize(self, root: 'Node') -> str:
        """Encodes a tree to a single string.
        
        :type root: Node
        :rtype: str
        """
        if not root:
            return ''
        result = []

        def helper(root):
            if root and len(root.children):
                result.append(str(len(root.children)))
                result.append(str(root.val))
                for ch in range(len(root.children)):
                    helper(root.children[ch])
            else:
                result.append(str(0))
                result.append(str(root.val))
        
        
        helper(root)
        result = '%'.join(result)
        return result
       
        
                
	
    def deserialize(self, data: str) -> 'Node':
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: Node
        """
        if not data:
            return None
        v = iter(data.split("%"))
        
        def helper():
            a,b = next(v), next(v)
            a,b = int(a),int(b)

            if a==0:
                r2 = TreeNode(b)
                r2.children = []
                return r2
            else:
                root = TreeNode(b)
                children = []
                for i in range(a):
                    children.append(helper())
                if children:
                    root.children = children
                return root
        root =  helper()
        return root
        

# Your Codec object will be instantiated and called as such:
# codec = Codec()
# codec.deserialize(codec.serialize(root))
