39. Sliding Window Maximum
Hard

2210

128

Favorite

Share
Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.

Example:

Input: nums = [1,3,-1,-3,5,3,6,7], and k = 3
Output: [3,3,5,5,6,7] 
Explanation: 

Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Note:
You may assume k is always valid, 1 ≤ k ≤ input array's size for non-empty array.

Follow up:
Could you solve it in linear time?


import collections
class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        mapp = collections.defaultdict(int)
        if not nums:
            return []
        maxim = float('-inf')
        for i in range(k):
            mapp[nums[i]]+=1
            maxim = max(maxim,nums[i])
        results= []
        start = 0 
        for i in range(k,len(nums)+1):
            results.append(maxim)
            mapp[nums[start]]-=1
            if mapp[nums[start]]==0:
                del mapp[nums[start]]
                if maxim==nums[start]:
                    maxim = float('-inf')
                    for key,value in mapp.items():
                        maxim = max(maxim,key)
            if i==len(nums):
                continue
            mapp[nums[i]]+=1
            start+=1
            maxim = max(maxim,nums[i])
        return results
