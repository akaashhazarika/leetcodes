209. Minimum Size Subarray Sum
Medium

1236

77

Favorite

Share
Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum â‰¥ s. If there isn't one, return 0 instead.

Example: 

Input: s = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: the subarray [4,3] has the minimal length under the problem constraint.
Follow up:
If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n). 


class Solution(object):
    def minSubArrayLen(self, s, nums):
        """
        :type s: int
        :type nums: List[int]
        :rtype: int
        """
        start = 0 
        curr = 0
        maxim = float('inf')
        for index,value in enumerate(nums):
            curr = curr + value
            while curr>=s:
                maxim = min(maxim,index-start+1)
                curr-=nums[start]
                start+=1
        return maxim if maxim!=float('inf') else 0
        
