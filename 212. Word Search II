212. Word Search II
Hard

1229

72

Favorite

Share
Given a 2D board and a list of words from the dictionary, find all words in the board.

Each word must be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

 

Example:

Input: 
board = [
  ['o','a','a','n'],
  ['e','t','a','e'],
  ['i','h','k','r'],
  ['i','f','l','v']
]
words = ["oath","pea","eat","rain"]

Output: ["eat","oath"]
 

Note:

All inputs are consist of lowercase letters a-z.
The values of words are distinct.



    
class Solution(object):
    def __init__(self):
        self.result = dict()
    
    def findWords(self, board, words):
        """
        :type board: List[List[str]]
        :type words: List[str]
        :rtype: List[str]
        """
        if not board or not board[0]:
            return []
        T = {}
        for word in words:
            curr = T
            for c in word:
                if c not in curr:
                    curr[c] = {}
                curr = curr[c]
            curr['#'] = True
            
        n,m = len(board),len(board[0])

        def helper(row,col,trie, res):
            if '#' in trie and res not in self.result:
                self.result[res] = True
            if row>=0 and row<n and col>=0 and col<m and \
                board[row][col] in trie:
                    val = board[row][col]
                    board[row][col]='%'
                    helper(row,col+1,trie[val],res+val)
                    helper(row,col-1,trie[val],res+val)
                    helper(row+1,col,trie[val],res+val)
                    helper(row-1,col,trie[val],res+val)
                    board[row][col] = val
        for i in range(n):
            for j in range(m):
                helper(i,j,T,"")
        return list(self.result.keys())
        
