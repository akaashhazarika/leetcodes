1004. Max Consecutive Ones III
Medium

306

6

Favorite

Share
Given an array A of 0s and 1s, we may change up to K values from 0 to 1.

Return the length of the longest (contiguous) subarray that contains only 1s. 

 

Example 1:

Input: A = [1,1,1,0,0,0,1,1,1,1,0], K = 2
Output: 6
Explanation: 
[1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1.  The longest subarray is underlined.
Example 2:

Input: A = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], K = 3
Output: 10
Explanation: 
[0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bolded numbers were flipped from 0 to 1.  The longest subarray is underlined.
 

Note:

1 <= A.length <= 20000
0 <= K <= A.length
A[i] is 0 or 1 


from collections import deque
class Solution:
    def longestOnes(self, A: List[int], K: int) -> int:
        zero_index = deque()
        maxim = 0
        start = 0
        if K:
            for index,value in enumerate(A):
                if not value:
                    if K:
                        K-=1
                        zero_index.append(index)
                    else:
                        start = zero_index.popleft()+1
                        zero_index.append(index)
                maxim = max(maxim,index-start+1)
        else:
            counter = 0
            for index,value in enumerate(A):
                if not value:
                    counter = 0
                else:
                    counter+=1
                    maxim = max(maxim,counter)
        return maxim
