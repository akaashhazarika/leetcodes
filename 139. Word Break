Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.

Note:

The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
Example 1:

Input: s = "leetcode", wordDict = ["leet", "code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".
Example 2:

Input: s = "applepenapple", wordDict = ["apple", "pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
             Note that you are allowed to reuse a dictionary word.
Example 3:

Input: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
Output: false


class Solution:
    def wordBreak(self, s, wordDict):
        deff=[0]*(len(s)+1)
        deff[0]=1
        mapp={}
        for i in wordDict:
            mapp[i]=True
        for i in range(len(s)+1):
            for j in range(0,i):
                word=s[j:i]
                deff[i]=deff[i] or (deff[j] and mapp.get(word,False)) 
       
        return deff[-1]
