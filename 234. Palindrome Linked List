234. Palindrome Linked List
Easy

1781

263

Favorite

Share
Given a singly linked list, determine if it is a palindrome.

Example 1:

Input: 1->2
Output: false
Example 2:

Input: 1->2->2->1
Output: true
Follow up:
Could you do it in O(n) time and O(1) space?




# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def isPalindrome(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        curr = None
        slow = fast = head
        while fast and fast.next:
            fast=fast.next.next
            slow,curr,curr.next = slow.next,slow, curr
        if fast:
            slow = slow.next
        
        while curr and curr.val == slow.val:
            curr =curr.next
            slow=slow.next
        
        return curr==None
