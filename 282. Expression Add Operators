282. Expression Add Operators
Hard

774

108

Favorite

Share
Given a string that contains only digits 0-9 and a target value, return all possibilities to add binary operators (not unary) +, -, or * between the digits so they evaluate to the target value.

Example 1:

Input: num = "123", target = 6
Output: ["1+2+3", "1*2*3"] 
Example 2:

Input: num = "232", target = 8
Output: ["2*3+2", "2+3*2"]
Example 3:

Input: num = "105", target = 5
Output: ["1*0+5","10-5"]
Example 4:

Input: num = "00", target = 0
Output: ["0+0", "0-0", "0*0"]
Example 5:

Input: num = "3456237490", target = 9191
Output: []



class Solution:
    def addOperators(self, num: 'str', target: 'int') -> 'List[str]':
        result = []
        def helper(index, path, value, prev):
            if index==len(num):
                if value==target:
                    result.append(path[:])
            else:
                for i in range(index+1,len(num)+1):
                    curr_value = int(num[index:i])
                    if i==index+1 or (i>index+1 and num[index]!='0'):
                        if prev is None:
                            helper(i,num[index:i],curr_value, curr_value)
                        else:
                            helper(i,path+'+'+num[index:i],value+curr_value,curr_value)
                            helper(i,path+'-'+num[index:i],value-curr_value,-curr_value)
                            helper(i,path+'*'+num[index:i],value-prev+prev*curr_value,prev*curr_value)
        helper(0,'',0,None)
        return result
