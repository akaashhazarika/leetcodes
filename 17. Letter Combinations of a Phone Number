17. Letter Combinations of a Phone Number
Medium

2470

328

Favorite

Share
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.



Example:

Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
Note:

Although the above answer is in lexicographical order, your answer could be in any order you want.


class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        mapp = collections.defaultdict(list)
        mapp['2']= ['a','b','c']
        mapp['3'] = ['d','e','f']
        mapp['4'] = ['g','h','i']
        mapp['5'] = ['j','k','l']
        mapp['6'] = ['m','n','o']
        mapp['7'] = ['p','q','r','s']
        mapp['8'] = ['t','u','v']
        mapp['9'] = ['w','x','y','z']
        res = []
        
        def helper(index,path):
            if index==len(digits):
                res.append(path[:])
            else:
                for elem in mapp[(digits[index])]:
                    helper(index+1,path+elem)
                    
        
        helper(0,'')
        if not digits:
            return []
        return res
