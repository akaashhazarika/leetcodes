1223. Dice Roll Simulation
Medium

103

44

Favorite

Share
A die simulator generates a random number from 1 to 6 for each roll. You introduced a constraint to the generator such that it cannot roll the number i more than rollMax[i] (1-indexed) consecutive times. 

Given an array of integers rollMax and an integer n, return the number of distinct sequences that can be obtained with exact n rolls.

Two sequences are considered different if at least one element differs from each other. Since the answer may be too large, return it modulo 10^9 + 7.

 

Example 1:

Input: n = 2, rollMax = [1,1,2,2,2,3]
Output: 34
Explanation: There will be 2 rolls of die, if there are no constraints on the die, there are 6 * 6 = 36 possible combinations. In this case, looking at rollMax array, the numbers 1 and 2 appear at most once consecutively, therefore sequences (1,1) and (2,2) cannot occur, so the final answer is 36-2 = 34.
Example 2:

Input: n = 2, rollMax = [1,1,1,1,1,1]
Output: 30
Example 3:

Input: n = 3, rollMax = [1,1,1,2,2,3]
Output: 181
 

Constraints:

1 <= n <= 5000
rollMax.length == 6
1 <= rollMax[i] <= 15



from functools import lru_cache
class Solution:
    def dieSimulator(self, n: int, rollMax: List[int]) -> int:
        @lru_cache(maxsize = None)
        def helper(n,last,last_counter):
            if n==0:
                return 1
            else:
                s = 0
                for i in range(6):
                    if last==i:
                        if last_counter>=self.rollMax[i]:
                            continue
                        else:
                            s+=helper(n-1,last,last_counter+1)
                    else:
                        s+=helper(n-1,i,1)

                return s%(1000000007)
        self.rollMax = rollMax
        val = helper(n,None,0)
        return val
                        
                        
                    
            
