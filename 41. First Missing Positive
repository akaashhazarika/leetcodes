41. First Missing Positive
Hard

2246

664

Favorite

Share
Given an unsorted integer array, find the smallest missing positive integer.

Example 1:

Input: [1,2,0]
Output: 3
Example 2:

Input: [3,4,-1,1]
Output: 2
Example 3:

Input: [7,8,9,11,12]
Output: 1
Note:

Your algorithm should run in O(n) time and uses constant extra space.


class Solution:
    def firstMissingPositive(self, nums: List[int]) -> int:
        start = 0
        for index,value in enumerate(nums):
            if value>0:
                nums[start] = value
                start+=1
        if start==0:
            return 1
        nums= nums[:start]
        print(nums)
        for i,v in enumerate(nums):
            new_value = abs(v)
            if new_value<=len(nums):
                nums[new_value-1] = -abs(nums[new_value-1])
        for i,v in enumerate(nums):
            if v>0:
                return i+1
        return len(nums)+1
