689. Maximum Sum of 3 Non-Overlapping Subarrays
Hard

613

34

Favorite

Share
In a given array nums of positive integers, find three non-overlapping subarrays with maximum sum.

Each subarray will be of size k, and we want to maximize the sum of all 3*k entries.

Return the result as a list of indices representing the starting position of each interval (0-indexed). If there are multiple answers, return the lexicographically smallest one.

Example:

Input: [1,2,1,2,6,7,5,1], 2
Output: [0, 3, 5]
Explanation: Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].
We could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger.
 

Note:

nums.length will be between 1 and 20000.
nums[i] will be between 1 and 65535.
k will be between 1 and floor(nums.length / 3).
 

Accepted


class Solution(object):
    def maxSumOfThreeSubarrays(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
        maxim_first=sum(nums[0:k])
        only_first = 0
        first_second = [0,k]
        first_second_third = [0,k,2*k]
        maxim_sec,maxim_th = sum(nums[:2*k]),sum(nums[:3*k])
        first_st,second_st,third_st = 0,k,2*k
        result = [0,k,2*k]
        
        first_sum = sum(nums[0:k])
        second_sum = sum(nums[k:2*k])
        third_sum = sum(nums[2*k:3*k])
        next_f,next_s,next_t = k,2*k,3*k
        while next_t<len(nums):
        
            first_sum+=nums[next_f]-nums[next_f-k]
            second_sum+=nums[next_s]-nums[next_s-k]
            third_sum+=nums[next_t]-nums[next_t-k]

            if first_sum>maxim_first:
                maxim_first = first_sum
                only_first = next_f-k+1
            if second_sum+maxim_first>maxim_sec:
                maxim_sec = second_sum+maxim_first
                first_second=[only_first,next_s-k+1]
            if maxim_sec+third_sum>maxim_th:
                maxim_th = maxim_sec+third_sum
                first_second_third = first_second+[next_t-k+1]
           
            next_f+=1
            next_s+=1
            next_t+=1
        return first_second_third
        
        
            
