92. Reverse Linked List II
Medium

3592

189

Add to List

Share
Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.

 

Example 1:


Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]
Example 2:

Input: head = [5], left = 1, right = 1
Output: [5]
 

Constraints:

The number of nodes in the list is n.
1 <= n <= 500
-500 <= Node.val <= 500
1 <= left <= right <= n
 

Follow up: Could you do it in one pass?
Accepted

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseBetween(self, head: ListNode, left: int, right: int) -> ListNode:
        dummy = ListNode(-1)
        dummy.next = head
        previous_iteration = dummy
        curr = dummy.next 
        counter = 0
        while curr:
            counter+=1
            if counter==left:
                current_copy = curr
                prev  = None
                for i in range(right-left+1):
                    curr.next,prev,curr = prev,curr,curr.next 
                
                previous_iteration.next = prev 
                current_copy.next = curr
                break
            else:
                previous_iteration = curr
                curr = curr.next 
        
        
        return dummy.next
        
        
        
        
        
