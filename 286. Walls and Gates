286. Walls and Gates
Medium

1601

25

Add to List

Share
You are given an m x n grid rooms initialized with these three possible values.

-1 A wall or an obstacle.
0 A gate.
INF Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.
Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.

 

Example 1:


Input: rooms = [[2147483647,-1,0,2147483647],[2147483647,2147483647,2147483647,-1],[2147483647,-1,2147483647,-1],[0,-1,2147483647,2147483647]]
Output: [[3,-1,0,1],[2,2,1,-1],[1,-1,2,-1],[0,-1,3,4]]
Example 2:

Input: rooms = [[-1]]
Output: [[-1]]
Example 3:

Input: rooms = [[2147483647]]
Output: [[2147483647]]
Example 4:

Input: rooms = [[0]]
Output: [[0]]
 

Constraints:

m == rooms.length
n == rooms[i].length
1 <= m, n <= 250
rooms[i][j] is -1, 0, or 231 - 1.


from collections import deque
class Solution:
    def wallsAndGates(self, rooms: List[List[int]]) -> None:
        """
        Do not return anything, modify rooms in-place instead.
        """
        d = deque()
        for i in range(len(rooms)):
            for j in range(len(rooms[0])):
                if rooms[i][j]==0:
                    d.append((0,i,j))
        
        mapp = set()
        while d:
            steps,row,column = d.popleft()
            if (row,column) in mapp:
                continue
            mapp.add((row,column))
            if rooms[row][column]!=-1:
                rooms[row][column] = steps
            
            for i,j in [(row-1,column),(row+1,column),(row,column-1),(row,column+1)]:
                if i>=0 and i<len(rooms) and j>=0 and j<len(rooms[0]) and rooms[i][j]!=-1:
                    d.append((steps+1,i,j))
        
        
