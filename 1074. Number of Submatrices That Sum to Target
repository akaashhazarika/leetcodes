1074. Number of Submatrices That Sum to Target
Hard

201

11

Favorite

Share
Given a matrix, and a target, return the number of non-empty submatrices that sum to target.

A submatrix x1, y1, x2, y2 is the set of all cells matrix[x][y] with x1 <= x <= x2 and y1 <= y <= y2.

Two submatrices (x1, y1, x2, y2) and (x1', y1', x2', y2') are different if they have some coordinate that is different: for example, if x1 != x1'.

 

Example 1:

Input: matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0
Output: 4
Explanation: The four 1x1 submatrices that only contain 0.
Example 2:

Input: matrix = [[1,-1],[-1,1]], target = 0
Output: 5
Explanation: The two 1x2 submatrices, plus the two 2x1 submatrices, plus the 2x2 submatrix.
 

Note:

1 <= matrix.length <= 300
1 <= matrix[0].length <= 300
-1000 <= matrix[i] <= 1000
-10^8 <= target <= 10^8


class Solution:
    def numSubmatrixSumTarget(self, matrix: List[List[int]], target: int) -> int:
        if not matrix:
            return 0
        n,m = len(matrix),len(matrix[0])
        total = 0
        for i in range(n):
            curr_matrix = [0]*m
            for j in range(i,n):
                for k in range(m):
                    curr_matrix[k]+=matrix[j][k]
                total+=self.helper(curr_matrix,target)
        return total
        
    def helper(self,nums,target):
        mapp = {0:1}
        result = 0
        curr = 0
        for num in nums:
            curr+=num
            result+=mapp.get(curr-target,0)
            mapp[curr] = mapp.get(curr,0)+1
        return result
