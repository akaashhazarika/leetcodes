#Repitition of elements Allowed
def knapsack(W,val,wt,index):
  if index<0 or W<0:
    return 0
  else:
    if wt[index]>W:
      return knapsack(W,val,wt,index-1)
    else:
      return max(knapsack(W,val,wt,index-1),val[index]+
      knapsack(W-wt[index],val,wt,index-1),val[index]+
      knapsack(W-wt[index],val,wt,index))


#Dynamic Programming of the above question .
def dp_knapsack(W,val,wt,index):
  if index<0 or W<0:
    return 0

  dp = [0]*(W+1)
  for w in range(1,len(dp)):
    for j in range(len(wt)):
      if w>=wt[j]:
        dp[w] = max(dp[w],val[j]+dp[w-wt[j]])
  return dp[-1]







W = 100
val = [10, 30, 20] 
wt = [5, 10, 15] 
print(dp_knapsack(W,val,wt,len(wt)-1))
