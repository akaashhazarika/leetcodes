430. Flatten a Multilevel Doubly Linked List
Medium

507

86

Favorite

Share
You are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the example below.

Flatten the list so that all the nodes appear in a single-level, doubly linked list. You are given the head of the first level of the list.

 

Example:

Input:
 1---2---3---4---5---6--NULL
         |
         7---8---9---10--NULL
             |
             11--12--NULL

Output:
1-2-3-7-8-11-12-9-10-4-5-6-NULL
 

Explanation for the above example:

Given the following multilevel doubly linked list:


 

We should return the following flattened doubly linked list:


"""
# Definition for a Node.
class Node(object):
    def __init__(self, val, prev, next, child):
        self.val = val
        self.prev = prev
        self.next = next
        self.child = child
"""
class Solution(object):
    def __init__(self):
        self.res = []
    def helper(self,root):
        if not root:
            return
        self.res.append(root.val)
        if root.child is not None:
            self.helper(root.child)
        self.helper(root.next)
        
    def flatten(self, head):
        """
        :type head: Node
        :rtype: Node
        """
        if not head:
            return head
        self.helper(head)
        if not self.res:
            return None
        dummy = Node(-1,None,None,None)
        curr = dummy
        for i in range(len(self.res)):
            curr.next = Node(self.res[i],None,None,None)
            if i==0:
                pass
            else:
                curr.next.prev = curr
            curr = curr.next
        return dummy.next
        
        
    
        

