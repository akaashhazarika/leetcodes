270. Closest Binary Search Tree Value
Easy

441

32

Favorite

Share
Given a non-empty binary search tree and a target value, find the value in the BST that is closest to the target.

Note:

Given target value is a floating point.
You are guaranteed to have only one unique value in the BST that is closest to the target.
Example:

Input: root = [4,2,5,1,3], target = 3.714286

    4
   / \
  2   5
 / \
1   3

Output: 4
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def closestValue(self, root: TreeNode, target: float) -> int:
        self.diff,self.value = float('inf'),None

        def helper(root,target):
            if not root:
                return 
            else:
                if abs(root.val-target)<self.diff:
                    self.diff,self.value = abs(root.val-target),root.val
                if root.val<target:
                    helper(root.right,target)
                else:
                    helper(root.left,target)
        
        helper(root,target)
        return self.value
