923. 3Sum With Multiplicity
Medium

248

48

Favorite

Share
Given an integer array A, and an integer target, return the number of tuples i, j, k  such that i < j < k and A[i] + A[j] + A[k] == target.

As the answer can be very large, return it modulo 10^9 + 7.

 

Example 1:

Input: A = [1,1,2,2,3,3,4,4,5,5], target = 8
Output: 20
Explanation: 
Enumerating by the values (A[i], A[j], A[k]):
(1, 2, 5) occurs 8 times;
(1, 3, 4) occurs 8 times;
(2, 2, 4) occurs 2 times;
(2, 3, 3) occurs 2 times.
Example 2:

Input: A = [1,1,2,2,2,2], target = 5
Output: 12
Explanation: 
A[i] = 1, A[j] = A[k] = 2 occurs 12 times:
We choose one 1 from [1,1] in 2 ways,
and two 2s from [2,2,2,2] in 6 ways.
 

Note:

3 <= A.length <= 3000
0 <= A[i] <= 100
0 <= target <= 300


class Solution:
    def threeSumMulti(self, A: List[int], target: int) -> int:
        MOD = 10**9 + 7
        mapp = collections.defaultdict(int)
        for elem in A:
            mapp[elem]+=1
        mod = 10**9 + 7
        res = 0
        for x in range(0,101):
            for y in range(x+1,101):
                rem =  target-x-y
                if rem>y and rem<=100:
                    res+=mapp[x]*mapp[y]*mapp[rem]
                    res%=mod
        "x=x,y"
        for x in range(0,101):  
            rem = target-2*x
            if rem>x and rem<=100:
                res+=(mapp[x]*(mapp[x]-1))/2 *(mapp[rem])
                res%=mod
        
        for x in range(0,101):
            rem = target-x 
            if rem%2==0 and rem/2 >x:
                res+=(mapp[x])*(mapp[rem/2]*(mapp[rem/2]-1))/2
                res%=mod
        
        if target%3==0:
            t = target//3
            if 0<=t<=100:
                res+=(mapp[t]*(mapp[t]-1)*(mapp[t]-2))/6
                res%=mod
        return int(res)
        
        
    
    
    
