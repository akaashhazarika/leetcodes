410. Split Array Largest Sum
Hard

649

38

Favorite

Share
Given an array which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays. Write an algorithm to minimize the largest sum among these m subarrays.

Note:
If n is the length of array, assume the following constraints are satisfied:

1 ≤ n ≤ 1000
1 ≤ m ≤ min(50, n)
Examples:

Input:
nums = [7,2,5,10,8]
m = 2

Output:
18

Explanation:
There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8],
where the largest sum among the two subarrays is only 18.



class Solution:
    def splitArray(self, nums: List[int], m: int) -> int:
        summer,maxim=0,float("-inf")
        for i in nums:
            maxim=max(maxim,i)
            summer+=i
        l,r=maxim,summer
        def ispossible(mid,nums,m):
            t=0
            n=1
            for i in nums:
                t+=i
                if t>mid:
                    t=i
                    n+=1
                    if n>m:
                        return 0
            return 1
                    
        while l<=r:
            mid= int(l)+int((r-l)/2)
            if ispossible(mid,nums,m):
                r=mid-1
            else:
                l=mid+1
        return l
        
