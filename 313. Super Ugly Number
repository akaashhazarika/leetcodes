313. Super Ugly Number
Medium
279
73


Write a program to find the nth super ugly number.

Super ugly numbers are positive numbers whose all prime factors are in the given prime list primes of size k.

Example:

Input: n = 12, primes = [2,7,13,19]
Output: 32 
Explanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 
             super ugly numbers given primes = [2,7,13,19] of size 4.
Note:

1 is a super ugly number for any given primes.
The given numbers in primes are in ascending order.
0 < k ≤ 100, 0 < n ≤ 106, 0 < primes[i] < 1000.
The nth super ugly number is guaranteed to fit in a 32-bit signed integer.


class Solution(object):
    def nthSuperUglyNumber(self, n, primes):
        ugly=[1]
        indexes=[0]*len(primes)
        while len(ugly)<n:
            for i in range(len(indexes)):
                while ugly[indexes[i]]*primes[i]<=ugly[-1]:
                    indexes[i]+=1
            ugly.append(min(ugly[indexes[i]]*primes[i] for i in range(len(primes))))
        return ugly[-1]
