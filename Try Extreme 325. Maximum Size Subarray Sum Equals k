325. Maximum Size Subarray Sum Equals k
Medium

641

26

Favorite

Share
Given an array nums and a target value k, find the maximum length of a subarray that sums to k. If there isn't one, return 0 instead.

Note:
The sum of the entire nums array is guaranteed to fit within the 32-bit signed integer range.

Example 1:

Input: nums = [1, -1, 5, -2, 3], k = 3
Output: 4 
Explanation: The subarray [1, -1, 5, -2] sums to 3 and is the longest.
Example 2:

Input: nums = [-2, -1, 2, 1], k = 1
Output: 2 
Explanation: The subarray [-1, 2] sums to 1 and is the longest.
Follow Up:
Can you do it in O(n) time?


class Solution:
    def maxSubArrayLen(self, nums: List[int], k: int) -> int:
        mapp = {}
        mapp[0] = -1
        maxim = 0
        counter = 0
        for index,value in enumerate(nums):
            counter+=value
            if counter-k in mapp:
                maxim = max(maxim,index-mapp[counter-k])
            if counter not in mapp:
                mapp[counter] = index
        return maxim
