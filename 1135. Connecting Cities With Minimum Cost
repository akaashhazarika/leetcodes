1135. Connecting Cities With Minimum Cost
Medium

131

6

Favorite

Share
There are N cities numbered from 1 to N.

You are given connections, where each connections[i] = [city1, city2, cost] represents the cost to connect city1 and city2 together.  (A connection is bidirectional: connecting city1 and city2 is the same as connecting city2 and city1.)

Return the minimum cost so that for every pair of cities, there exists a path of connections (possibly of length 1) that connects those two cities together.  The cost is the sum of the connection costs used. If the task is impossible, return -1.

 

Example 1:



Input: N = 3, connections = [[1,2,5],[1,3,6],[2,3,1]]
Output: 6
Explanation: 
Choosing any 2 edges will connect all cities so we choose the minimum 2.
Example 2:



Input: N = 4, connections = [[1,2,3],[3,4,4]]
Output: -1
Explanation: 
There is no way to connect all cities even if all edges are used.
 

Note:

1 <= N <= 10000
1 <= connections.length <= 10000
1 <= connections[i][0], connections[i][1] <= N
0 <= connections[i][2] <= 10^5
connections[i][0] != connections[i][1]

class Solution:
    def minimumCost(self, N: int, connections: List[List[int]]) -> int:
        mapp = dict()
        def parent(node,mapp):
            if node not in mapp:
                mapp[node] = node
                return node
            else:
                while mapp[node]!=node:
                    node = mapp[node]
                return node
        connections.sort(key=lambda v: (v[2]))
        total  = 0

        for a,b,cost in connections:
            p1,p2 = parent(a,mapp),parent(b,mapp)   
            if p1!=p2:
                N-=1
                mapp[p1] = p2
                total+=cost

        return total if N==1 else -1
            
