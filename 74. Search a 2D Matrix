74. Search a 2D Matrix
Medium

928

110

Favorite

Share
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
Example 1:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
Output: true
Example 2:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 13
Output: false


class Solution(object):
    def searchMatrix(self, matrix, target):
        """
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """
        if not matrix or not matrix[0]:
            return False
        low,high = 0 ,len(matrix)*len(matrix[0]) -1
        
        N = len(matrix[0])
        while low<=high:
            mid = int((low+high)/2)
            r,c = mid/N, mid%N
            if matrix[r][c]==target:
                return True
            if matrix[r][c]>target:
                high = mid-1
            else:
                low = mid+1
        return False
        
