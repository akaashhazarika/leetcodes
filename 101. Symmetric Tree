101. Symmetric Tree
Easy

2339

48

Favorite

Share
Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
 

But the following [1,2,2,null,3,null,3] is not:

    1
   / \
  2   2
   \   \
   3    3
 

Note:
Bonus points if you could solve it both recursively and iteratively.



# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:

    def isSymmetric(self, root: TreeNode) -> bool:
        res = [] 
        def helper(root,level):
            if not root:
                return 
            else:
                helper(root.left,level+1)
                res.append(str(root.val)+'#'+str(level))
                helper(root.right,level+1)
                
        helper(root,0)
        return all(res[i]==res[~i] for i in range(len(res)//2))
