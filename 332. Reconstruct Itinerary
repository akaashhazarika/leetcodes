332. Reconstruct Itinerary
Medium

821

534

Favorite

Share
Given a list of airline tickets represented by pairs of departure and arrival airports [from, to], reconstruct the itinerary in order. All of the tickets belong to a man who departs from JFK. Thus, the itinerary must begin with JFK.

Note:

If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. For example, the itinerary ["JFK", "LGA"] has a smaller lexical order than ["JFK", "LGB"].
All airports are represented by three capital letters (IATA code).
You may assume all tickets form at least one valid itinerary.
Example 1:

Input: [["MUC", "LHR"], ["JFK", "MUC"], ["SFO", "SJC"], ["LHR", "SFO"]]
Output: ["JFK", "MUC", "LHR", "SFO", "SJC"]
Example 2:

Input: [["JFK","SFO"],["JFK","ATL"],["SFO","ATL"],["ATL","JFK"],["ATL","SFO"]]
Output: ["JFK","ATL","JFK","SFO","ATL","SFO"]
Explanation: Another possible reconstruction is ["JFK","SFO","ATL","JFK","ATL","SFO"].
             But it is larger in lexical order.
             
             
import collections
class Solution(object):
    def __init__(self):
        self.result = None
        self.total_length = None
    def findItinerary(self, tickets):
        """
        :type tickets: List[List[str]]
        :rtype: List[str]
        """
        airports = collections.defaultdict(list)
        for a,b in tickets:
            airports[a].append(b)
        self.total_length = len(tickets)+1
        result = None
        def helper(airport,path):
            if len(path)==self.total_length:
                self.result = path[:]
                return True
            else:
                possible = airports[airport]
                for p in sorted(possible):
                    path.append(p)
                    airports[airport].remove(p)
                    result = helper(p,path)
                    if result:
                        return True
                    airports[airport].append(p)
                    path.pop()
        starts = airports['JFK']
        for p in sorted(starts):
            path = ['JFK']+[p]
            airports['JFK'].remove(p)
            value = helper(p,path)
            if value:
                return self.result
            airports['JFK'].append(p)

            path.pop()
