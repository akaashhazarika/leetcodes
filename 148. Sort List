148. Sort List
Medium

1117

61

Favorite

Share
Sort a linked list in O(n log n) time using constant space complexity.

Example 1:

Input: 4->2->1->3
Output: 1->2->3->4
Example 2:

Input: -1->5->3->4->0
Output: -1->0->3->4->5


# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    
    def merge(self,head1,head2):
        head=curr=ListNode(0)
        while head1 and head2:
            if head1.val<head2.val:
                curr.next=head1
                curr=curr.next
                head1=head1.next
            else:
                curr.next=head2
                curr=curr.next
                head2=head2.next
        if head1:
            curr.next=head1
        if head2:
            curr.next=head2
        return head.next
        
        
        

    def mergesort(self,head):
        if not head or not head.next:
            return head
        slow,fast=head,head
        while fast and fast.next and fast.next.next:
            fast=fast.next.next
            slow=slow.next
        fast=slow.next
        slow.next=None
        return self.merge(self.mergesort(head),self.mergesort(fast))
        
        
            
    def sortList(self, head):
        l=0
        curr=self.mergesort(head)
        return curr
        
