109. Convert Sorted List to Binary Search Tree
Medium

1326

75

Favorite

Share
Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example:

Given the sorted linked list: [-10,-3,0,5,9],

One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

      0
     / \
   -3   9
   /   /
 -10  5
 
 
 
 # Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def sortedListToBST(self, head: ListNode) -> TreeNode:
        if not head:
            return None
        elif head.next is None:
            return TreeNode(head.val)
        else:
            slow,fast = head,head
            prev = head
            slow = slow.next
            fast = head.next.next 
            while fast is not None and fast.next is not None:
                fast = fast.next.next
                prev = slow
                slow = slow.next 
            
            root = TreeNode(slow.val)
            ft = slow.next
            prev.next = None
            root.left = self.sortedListToBST(head)
            root.right = self.sortedListToBST(ft)
            return root
