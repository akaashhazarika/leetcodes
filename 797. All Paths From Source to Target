797. All Paths From Source to Target

Medium

382

32

Favorite

Share
Given a directed, acyclic graph of N nodes.  Find all possible paths from node 0 to node N-1, and return them in any order.

The graph is given as follows:  the nodes are 0, 1, ..., graph.length - 1.  graph[i] is a list of all nodes j for which the edge (i, j) exists.

Example:
Input: [[1,2], [3], [3], []] 
Output: [[0,1,3],[0,2,3]] 
Explanation: The graph looks like this:
0--->1
|    |
v    v
2--->3
There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.
Note:

The number of nodes in the graph will be in the range [2, 15].
You can print different paths in any order, but you should keep the order of nodes inside one path.
Accepted


class Solution(object):
    def allPathsSourceTarget(self, graph):
        """
        :type graph: List[List[int]]
        :rtype: List[List[int]]
        """
        import collections
        mydict=collections.defaultdict(list)
        for i in range(len(graph)):
            for j in graph[i]:
                mydict[j].append(i)
        res=[]
        def createpath(path,curr):
            if curr==0:
                res.append(path[::-1])
            value=path[-1]
            for temp in mydict[value]:
                path.append(temp)
                createpath(path,temp)
                path.pop()
        createpath([len(graph)-1],len(graph)-1)
        return res
