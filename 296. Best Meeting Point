296. Best Meeting Point
Hard

272

21

Favorite

Share
A group of two or more people wants to meet and minimize the total travel distance. You are given a 2D grid of values 0 or 1, where each 1 marks the home of someone in the group. The distance is calculated using Manhattan Distance, where distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|.

Example:

Input: 

1 - 0 - 0 - 0 - 1
|   |   |   |   |
0 - 0 - 0 - 0 - 0
|   |   |   |   |
0 - 0 - 1 - 0 - 0

Output: 6 

Explanation: Given three people living at (0,0), (0,4), and (2,2):
             The point (0,2) is an ideal meeting point, as the total travel distance 
             of 2+2+2=6 is minimal. So return 6.
             
             


class Solution(object):
    def minTotalDistance(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        n=list()
        m=list()
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j]:
                    n.append(i)
                    m.append(j)
                    
        def calculator(mylist):
            i,j=0,len(mylist)-1
            summer=0
            while i<j:
                value=mylist[j]-mylist[i]
                summer+=value
                i+=1
                j-=1
            return summer
        n.sort()
        m.sort()
        return calculator(n)+calculator(m)
