329. Longest Increasing Path in a Matrix
Hard

1131

19

Favorite

Share
Given an integer matrix, find the length of the longest increasing path.

From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).

Example 1:

Input: nums = 
[
  [9,9,4],
  [6,6,8],
  [2,1,1]
] 
Output: 4 
Explanation: The longest increasing path is [1, 2, 6, 9].
Example 2:

Input: nums = 
[
  [3,4,5],
  [3,2,6],
  [2,2,1]
] 
Output: 4 
Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.


from functools import lru_cache
class Solution:
    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        if not matrix or not matrix[0]:
            return 0
        n,m = len(matrix),len(matrix[0])
        
        @lru_cache(maxsize=None)
        def dfs(prev,i,j):
            if i>=0 and i<n and j>=0 and j<m:
                if matrix[i][j]>prev:
                    v = matrix[i][j]
                    val = [dfs(v,i-1,j),dfs(v,i+1,j),dfs(v,i,j-1),dfs(v,i,j+1)]
                    return 1+max(val)
            return 0
        maxim = 0
        for i in range(n):
            for j in range(m):
                maxim = max(maxim,dfs(float('-inf'),i,j))
        return maxim
