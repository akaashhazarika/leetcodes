1209. Remove All Adjacent Duplicates in String II
Medium

136

5

Favorite

Share
Given a string s, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them causing the left and the right side of the deleted substring to concatenate together.

We repeatedly make k duplicate removals on s until we no longer can.

Return the final string after all such duplicate removals have been made.

It is guaranteed that the answer is unique.

 

Example 1:

Input: s = "abcd", k = 2
Output: "abcd"
Explanation: There's nothing to delete.
Example 2:

Input: s = "deeedbbcccbdaa", k = 3
Output: "aa"
Explanation: 
First delete "eee" and "ccc", get "ddbbbdaa"
Then delete "bbb", get "dddaa"
Finally delete "ddd", get "aa"
Example 3:

Input: s = "pbbcggttciiippooaais", k = 2
Output: "ps"
 

Constraints:

1 <= s.length <= 10^5
2 <= k <= 10^4
s only contains lower case English letters.



class Solution(object):
    def removeDuplicates(self, s, K):
        """
        :type s: str
        :type k: int
        :rtype: str
        """
        stack = []
        past = None
        counter = 0
        for e in s:
            if past ==e:
                counter+=1
                stack+=(e,counter),
                if counter==K:
                    for i in range(K):
                        _ = stack.pop()
                    if stack:
                        past = stack[-1][0]
                        counter = stack[-1][1]
                    else:
                        past = None
                        counter = 0
            else:
                counter = 1
                stack+=(e,counter),
                past = e
                
        stack = [i for i,v in stack]
        return ''.join(stack)
