Medium

219

204

Favorite

Share
In a string composed of 'L', 'R', and 'X' characters, like "RXXLRXRXL", a move consists of either replacing one occurrence of "XL" with "LX", or replacing one occurrence of "RX" with "XR". Given the starting string start and the ending string end, return True if and only if there exists a sequence of moves to transform one string to the other.

Example:

Input: start = "RXXLRXRXL", end = "XRLXXRRLX"
Output: True
Explanation:
We can transform start to end following these steps:
RXXLRXRXL ->
XRXLRXRXL ->
XRLXRXRXL ->
XRLXXRRXL ->
XRLXXRRLX
Note:

1 <= len(start) = len(end) <= 10000.
Both start and end will only consist of characters in {'L', 'R', 'X'}.
Accepted


class Solution(object):
    def canTransform(self, start, end):
        """
        :type start: str
        :type end: str
        :rtype: bool
        """
        if len(start)!=len(end):
            return False
        source=[(val,index) for index,val in enumerate(start) if val=='R' or val=='L']
        destination=[(val,index) for index,val in enumerate(end) if val=='R' or val=='L']
        print(source,destination)
        if len(source)!=len(destination):
            return False
        for (a,b),(c,d) in zip(source,destination):
            if a!=c:
                return False
            if a=='L' and b<d:
                return False
            if a=='R' and b>d:
                return False
        return True
