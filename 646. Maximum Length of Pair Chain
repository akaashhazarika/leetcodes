646. Maximum Length of Pair Chain
Medium

646

56

Favorite

Share
You are given n pairs of numbers. In every pair, the first number is always smaller than the second number.

Now, we define a pair (c, d) can follow another pair (a, b) if and only if b < c. Chain of pairs can be formed in this fashion.

Given a set of pairs, find the length longest chain which can be formed. You needn't use up all the given pairs. You can select pairs in any order.

Example 1:
Input: [[1,2], [2,3], [3,4]]
Output: 2
Explanation: The longest chain is [1,2] -> [3,4]
Note:
The number of given pairs will be in the range [1, 1000].


import bisect
class Solution:
    def findLongestChain(self, pairs: List[List[int]]) -> int:
#         pairs.sort()
#         n = len(pairs)
#         if not pairs:
#             return 0
#         dp = [1]*n
#         maxim = 1
#         for i in range(n):
#             for j in range(i):
#                 if pairs[i][0]>pairs[j][1]:
#                     dp[i] = max(dp[i],dp[j]+1)
#                     maxim = max(maxim,dp[i])
#         return maxim
            
        pairs.sort(key=lambda v:(v[1]))
        result = 0
        past = float('-inf')
        for x,y in pairs:
            if x>past:
                past = y
                result+=1
        return result
