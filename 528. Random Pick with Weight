528. Random Pick with Weight
Medium

315

590

Favorite

Share
Given an array w of positive integers, where w[i] describes the weight of index i, write a function pickIndex which randomly picks an index in proportion to its weight.

Note:

1 <= w.length <= 10000
1 <= w[i] <= 10^5
pickIndex will be called at most 10000 times.
Example 1:

Input: 
["Solution","pickIndex"]
[[[1]],[]]
Output: [null,0]
Example 2:

Input: 
["Solution","pickIndex","pickIndex","pickIndex","pickIndex","pickIndex"]
[[[1,3]],[],[],[],[],[]]
Output: [null,0,1,1,1,0]
Explanation of Input Syntax:

The input is two lists: the subroutines called and their arguments. Solution's constructor has one argument, the array w. pickIndex has no arguments. Arguments are always wrapped with a list, even if there aren't any.



class Solution:

    def __init__(self, w: List[int]):
        self.total = sum(w)
        for i,v in enumerate(w[1:],1):
            w[i]+=w[i-1]
        self.w = w
      
    def pickIndex(self) -> int:
        choice = random.randint(1,self.total)
        left,right = 0,len(self.w)-1
        arr = self.w
        print(self.total, choice)
        while left<=right:
            mid = (left+right)//2
            if arr[mid]==choice:
                return mid
            if arr[mid]>choice:
                right = mid-1
            else:
                left = mid+1
        return left


# Your Solution object will be instantiated and called as such:
# obj = Solution(w)
# param_1 = obj.pickIndex()
