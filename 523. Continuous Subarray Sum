523. Continuous Subarray Sum
Medium

716

919

Favorite

Share
Given a list of non-negative numbers and a target integer k, write a function to check if the array has a continuous subarray of size at least 2 that sums up to a multiple of k, that is, sums up to n*k where n is also an integer.

 

Example 1:

Input: [23, 2, 4, 6, 7],  k=6
Output: True
Explanation: Because [2, 4] is a continuous subarray of size 2 and sums up to 6.
Example 2:

Input: [23, 2, 6, 4, 7],  k=6
Output: True
Explanation: Because [23, 2, 6, 4, 7] is an continuous subarray of size 5 and sums up to 42.
 

Note:

The length of the array won't exceed 10,000.
You may assume the sum of all the numbers is in the range of a signed 32-bit integer.



class Solution(object):
    def checkSubarraySum(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: bool
        """
        if k==0:
            return any(nums[i]==0 and nums[i+1]==0 for i in \
                       range(0,len(nums)-1))
        mapp={0:-1}
        total=0
        for index,value in enumerate(nums):
            total=(total+value)%k
            if total in mapp and index-mapp[total]>=2:
                return True
            else:
                if total not in mapp:
                    mapp[total]=index
            
        return False
