787. Cheapest Flights Within K Stops
There are n cities connected by m flights. Each fight starts from city u and arrives at v with a price w.

Now given all the cities and flights, together with starting city src and the destination dst, your task is to find the cheapest price from src to dst with up to k stops. If there is no such route, output -1.

Example 1:
Input: 
n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]
src = 0, dst = 2, k = 1
Output: 200
Explanation: 


class Solution(object):
    def findCheapestPrice(self, n, flights, src, dst, K):
        """
        :type n: int
        :type flights: List[List[int]]
        :type src: int
        :type dst: int
        :type K: int
        :rtype: int
        """
        m=collections.defaultdict(dict)
        for src,dest,cost in flights:
            m[src][dest]=cost
        myheap=[(0,src,K+1)]
        while myheap:
            cost,curr,counter=heapq.heappop(myheap)
            if curr==dst:
                return cost
            if counter>0:
                for airports in m[curr]:
                    heapq.heappush(myheap,(cost+m[curr][airports],airports,counter-1))
        return -1
     
