300. Longest Increasing Subsequence
Medium

2747

64

Favorite

Share
Given an unsorted array of integers, find the length of longest increasing subsequence.

Example:

Input: [10,9,2,5,3,7,101,18]
Output: 4 
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. 
Note:

There may be more than one LIS combination, it is only necessary for you to return the length.
Your algorithm should run in O(n2) complexity.
Follow up: Could you improve it to O(n log n) time complexity?




import bisect
class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
#         dp = [1] * len(nums)
#         if nums:
#             maxim = 1
#         else:
#             maxim = 0
        
#         for i in range(1,len(nums)):
#             m = 0
#             flag =0
#             for j in range(0,i):
#                 if nums[i] > nums[j]:
#                     m = max(m,dp[j])
#                     flag = 1
#             if flag ==1:
#                 dp[i] = m+1
#             else:
#                 dp[i] =1
#             maxim = max(maxim,dp[i])
#         return maxim

##Binary Search Approach:: COOOL::::: 
        seq = []
        length = 0
        for num in nums:
            index = bisect.bisect_left(seq,num)
            if index ==length:
                seq.append(num)
                length = length+1
            else:
                seq[index] = num
        return len(seq)
