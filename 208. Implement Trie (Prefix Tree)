208. Implement Trie (Prefix Tree)
Medium
1205
24


Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true
Note:

You may assume that all inputs are consist of lowercase letters a-z.
All inputs are guaranteed to be non-empty strings.


class TrieNode(object):
    def __init__(self):
        self.isword=False
        self.children=collections.defaultdict(TrieNode)

class Trie(object):

    def __init__(self):
        self.root=TrieNode()
        

    def insert(self, word):
        pres=self.root
        for c in word:
            pres=pres.children[c]
        pres.isword=True
        

    def search(self, word,value=False):
        pres=self.root
        for c in word:
            if c not in pres.children:
                return False
            pres=pres.children[c]
        if value==False:
            return pres.isword
        return True

    def startsWith(self, prefix):
        self.search(prefix,True)
        


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
