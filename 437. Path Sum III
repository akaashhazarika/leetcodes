437. Path Sum III
Easy

2276

134

Favorite

Share
You are given a binary tree in which each node contains an integer value.

Find the number of paths that sum to a given value.

The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).

The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.

Example:

root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

Return 3. The paths that sum to 8 are:

1.  5 -> 3
2.  5 -> 2 -> 1
3. -3 -> 11

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
import collections
class Solution(object):
    def helper(self,root,sum_so_far,target,cache):
        if not root:
            return 0
        else:
            sum_so_far+=root.val
            res = 0
            res+=cache[sum_so_far-target]
            cache[sum_so_far]+=1
            res+=self.helper(root.left,sum_so_far,target,cache)+self.helper(root.right,sum_so_far,target,cache)
            cache[sum_so_far]-=1
            return res
       
    def pathSum(self, root, sum):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: int
        """
        cache = collections.defaultdict(int)
        cache[0] = 1
        self.result = 0
        self.result = self.helper(root,0, sum,cache)
        return self.result
