673. Number of Longest Increasing Subsequence
Medium

968

67

Favorite

Share
Given an unsorted array of integers, find the number of longest increasing subsequence.

Example 1:
Input: [1,3,5,4,7]
Output: 2
Explanation: The two longest increasing subsequence are [1, 3, 4, 7] and [1, 3, 5, 7].
Example 2:
Input: [2,2,2,2,2]
Output: 5
Explanation: The length of longest continuous increasing subsequence is 1, and there are 5 subsequences' length is 1, so output 5.
Note: Length of the given array will be not exceed 2000 and the answer is guaranteed to be fit in 32-bit signed int.


class Solution:
    def findNumberOfLIS(self, nums: List[int]) -> int:
        if not nums:
            return 0
        n = len(nums)
        length = [1]*n
        counts = [1]*n   
        
        for i in range(1,n):
            for j in range(0,i):
                if nums[j]<nums[i]:
                    if 1+length[j]>length[i]:
                        length[i] = 1+length[j]
                        counts[i] = counts[j]
                    elif length[j]+1==length[i]:
                        counts[i]+=counts[j]
        final = max(length)
        counter = 0
        for a,b in zip(length,counts):
            if a==final:
                counter+=b
        return counter
