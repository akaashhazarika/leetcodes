114. Flatten Binary Tree to Linked List
Medium

1578

205

Favorite

Share
Given a binary tree, flatten it to a linked list in-place.

For example, given the following tree:

    1
   / \
  2   5
 / \   \
3   4   6
The flattened tree should look like:

1
 \
  2
   \
    3
     \
      4
       \
        5
         \
          6
          
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
from collections import deque
class Solution:
    def flatten(self, root: TreeNode) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
       
        q=[]
        last=TreeNode(-1)
        q.append(root)
        while q:
            curr=q.pop()
            last.right=curr
            last.left=None
            if curr and curr.right:
                q.append(curr.right)
            if curr and curr.left:
                q.append(curr.left)
            last=curr
