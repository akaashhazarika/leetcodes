120. Triangle
Medium

1217

134

Favorite

Share
Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

For example, given the following triangle

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).

Note:

Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle



class Solution:
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        print(triangle)
        dp = list(triangle[-1])
        dp2 = list([0]*len(triangle[-1]))
        for row,value in enumerate(reversed(triangle[:-1]),1):
            for index,elem in enumerate(value,0):
                dp2[index] = elem+min(dp[index],dp[index+1])
            dp = dp2[:-row] +[float('inf')]*row
        return min(list(dp))
